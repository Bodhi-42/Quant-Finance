from datetime import datetime
import numpy as np
from scipy.optimize import fsolve

class Portfolio:
    def __init__(self, cf, aum):
        self.cf = cf
        self.aum = aum

    def npv(self, rate, cf, t):
        return sum(cf[n] / (1 + rate) ** t[n] for n in range(len(cf)))

    def twr(self):
        twr = 1
        for d in range(len(self.cf) - 1):
            start_date = self.cf[d]["date"]
            end_date = self.cf[d+1]["date"]
            flow = self.cf[d+1]["flow"]
            R = (self.aum[end_date] - flow) / self.aum[start_date]
            twr *= R
        period = (datetime.strptime(self.cf[-1]["date"], "%Y-%m-%d") -
                  datetime.strptime(self.cf[0]["date"], "%Y-%m-%d")).days
        return (twr ** (365 / period)) - 1

    def mwr(self):
        base_date = datetime.strptime(self.cf[0]["date"], "%Y-%m-%d")
        t = [(datetime.strptime(c["date"], "%Y-%m-%d") - base_date).days / 365
             for c in self.cf]
        cf = [c["flow"] for c in self.cf]
        cf[-1] += self.aum[self.cf[-1]["date"]]
        irr = fsolve(lambda r: self.npv(r, cf, t), 0.1)[0]
        return irr

cash_flows = [
    {"date": "2024-01-01", "flow": -1000},
    {"date": "2024-03-01", "flow": -500},
    {"date": "2024-06-01", "flow": 200},
    {"date": "2024-12-31", "flow": 0}
]

portfolio_values = {
    "2024-01-01": 1000,
    "2024-03-01": 1800,
    "2024-06-01": 1600,
    "2024-12-31": 2200
}

p1 = Portfolio(cash_flows, portfolio_values)
print("TWR:", p1.twr())
print("MWR:", p1.mwr())
