from datetime import datetime
import numpy as np
import numpy_financial as npf   # for IRR (Money Weighted Return)

class Portfolio:
    def __init__(self, cf, aum):
        self.cf = cf
        self.aum = aum

    def twr(self):
        # Pre-extract dates to avoid repeated parsing
        dates = [datetime.strptime(d["date"], "%Y-%m-%d") for d in self.cf]
        flows = np.array([d["flow"] for d in self.cf])

        # Compute sub-period returns in one vectorized pass
        sub_returns = []
        for i in range(len(dates) - 1):
            start_val = self.aum[self.cf[i]["date"]]
            end_val = self.aum[self.cf[i+1]["date"]] + flows[i+1]
            sub_returns.append(end_val / start_val)

        twr = np.prod(sub_returns)
        total_days = (dates[-1] - dates[0]).days
        return twr**(365 / total_days) - 1

    def mwr(self):
        # Extract cashflows
        cf = np.array([d["flow"] for d in self.cf])
        # Add final portfolio value to last cashflow
        cf[-1] += self.aum[self.cf[-1]["date"]]

        # IRR gives periodic return (assuming equally spaced periods)
        irr = npf.irr(cf)
        if irr is None:
            return None

        # Annualize IRR based on total horizon
        dates = [datetime.strptime(d["date"], "%Y-%m-%d") for d in self.cf]
        total_years = (dates[-1] - dates[0]).days / 365
        return (1 + irr) ** (1 / total_years) - 1


# Example
cash_flows = [
    {"date": "2024-01-01", "flow": -1000},   # Initial investment
    {"date": "2024-03-01", "flow": -500},    # Additional investment
    {"date": "2024-06-01", "flow": 200},     # Withdrawal
    {"date": "2024-12-31", "flow": 0}        # End date
]

portfolio_values = {
    "2024-01-01": 1000,
    "2024-03-01": 1800,
    "2024-06-01": 1600,
    "2024-12-31": 2200
}

p1 = Portfolio(cash_flows, portfolio_values)
print("TWR:", p1.twr())
print("MWR:", p1.mwr())
